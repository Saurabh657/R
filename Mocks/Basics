#-------------------------------------------
#Vector
a = c(1,2,3,4,5)
a[1]
a[c(2,1)]



#----------------------------------------------
#Matrices
a = c(1,2,3,4,5)
b= c(5,6,7,8,10)
c= matrix(a,b,nrow=5, ncol=5)
print(c)
 
c[1,]
c[,2]


#OR-----------------
a = matrix(c(1,2,3,1,2,3,3,3,3,2,1,4,2,NA,8,9), nrow = 4,ncol =4, byrow = FALSE)
a

a=matrix(1:9, nrow = 3, ncol = 3)
a


#Rbind and Cbind-------------------
a1 = cbind(a,c(1:3))
a1

a2 = rbind(a1,c(1:5))
a2

#apply function
my.matrx <- matrix(c(1:10, 11:20, 21:30), nrow = 10, ncol = 3)
my.matrx

apply(my.matrx, 1, sum)
apply(my.matrx, 2, length)

#lapply function
A<-c(1:9)
B<-c(1:12)
C<-c(1:15)
my.lst<-list(A,B,C)
lapply(my.lst, sum)
#lapply applies treats the vector like a list, and applies the function to each point in the vector

#sapply
my.lst2 <- sapply(my.lst, function(x) x*2)
my.lst2


#----------------------------------------


a = matrix(c (643,4654,15,35,5,5 ), nrow = 2, ncol = 3 , byrow = FALSE)
a


a1 = cbind(a ,c(1:2))
a1

a2 = rbind(a1, c(1,0,4,3))
a2


#boxplot-------------

#Syntax:-
boxplotname = boxplot(datarame_name$variablename) 

#Code:-
bx = boxplot(train$deposit_amount_2011)   





#--------------------------------------------------
#Array
a= c(1,2,3)
b=c(3,5,6,8,7,8)     #Array_Name <- array(data, dim = (row_Size, column_Size, matrices, dimnames)
sau = array(c(a,b),dim=c(3,3,2))        
print(sau)

sau[1,2,]


#--------------------------------------------------------
#Dataframes
name = c("Saurabh","LANGO","Deathsroke" ) 
 sex <- c("M","F","T") 
 age <- c(27,26,26)
buu = data.frame(name,sex,age, stringsAsFactors = FALSE); 
print(buu)

place = c('Mumbai','Pune','Nashik')
buu2 = cbind(buu,place)
buu2

buu$name
buu$sex
buu$sex[2]




#Performing c bind and r bind in dataframes
data_1 <- data.frame(x1 = c(7, 3, 2, 9, 0),         
                     x2 = c(4, 4, 1, 1, 8),         
                     x3 = c(5, 3, 9, 2, 4))         

data_1
y1 <- c(9, 8, 7, 6, 5)                              

data_new1 <- cbind(data_1, y1)                       # cbind vector to data frame
data_new1                                            # Print data to RStudio console


#Stringasfactors=false" means to specify whether strings should be treated as factor variables

#-------------------------------------------------------------
#list
vec = c(1,2,3,4)
m1 = matrix(vec,2,2)
fuu=list(vec,m1)
print(fuu)

fuu[1] 

#accessing a dataset
data =iris
head(data)
View(data)

#---------------------------------------------------------------
#treating missing values

is.na(data$Sepal.Length)			#*this returns the missing value in boolean format
sum(is.na(data$Sepal.Length))		#*this returns the sum  by adding all the missing values
summary(data)
#Eg.no 1
data$Sepal.Length[is.na(data$Sepal.Length)]=5

#Eg.no.2
Data$Age[is.na(Data$Age)]=39  #i am telling to covert those 13 missing no's to 39 which is the median

#------------------------------------------------------
#function of ml
#linear regression
cor(final_data)

final_data1<- lm(price~.,data=final_data)
vif(final_data1)              #multicolinearity

summary(final_data1)

final_data2 <- lm(price~ curbweight + stroke + compressionratio + carwidth + horsepower + peakrpm + fueltype_gas + carbody_hatchback + carbody_wagon + enginelocation_front +enginetype_dohc + enginetype_l + enginetype_ohc + enginetype_ohcf   + fuelsystem_mpfi + fuelsystem_2bbl + fuelsystem_1bbl,data = final_data)
summary(final_data2)


#Logistic regression 
model <- glm(RAIN ~ TMAX + TMIN, data = t_train, family = binomial) #family suggests that the op is binomial
summary(model)

#Decision tree
cardio.train.fit <- rpart(status ~ . , data = cardio.train, method = "class", cp = 0.05)
summary(cardio.train.fit)

#how to see descriptive statistics
data = read.csv("F:/rworkspace/wine.csv")
summary(data)


#r bind and c bind

#------------------------------------------------
library(caret)
xtab <- confusionMatrix(final_data$price, sample(final_data$price))



#--------------------------------------------------
colAUC(X, y, plotROC=FALSE, alg=c("Wilcoxon","ROC"))

